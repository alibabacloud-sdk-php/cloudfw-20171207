<?php

// This file is auto-generated, don't edit it. Thanks.

namespace AlibabaCloud\SDK\Cloudfw\V20171207\Models\DescribeVulnerabilityProtectedListResponseBody;

use AlibabaCloud\SDK\Cloudfw\V20171207\Models\DescribeVulnerabilityProtectedListResponseBody\vulnList\resourceList;
use AlibabaCloud\Tea\Model;

class vulnList extends Model
{
    /**
     * @example 0
     *
     * @var int
     */
    public $attackCnt;

    /**
     * @description The attack type of the intrusion events. Valid values:
     *
     * **1**: suspicious connection
     * **2**: command execution
     * **3**: brute-force attack
     * **4**: scanning
     * **5**: others
     * **6**: information leak
     * **7**: DoS attack
     * **8**: buffer overflow attack
     * **9**: web attack
     * **10**: trojan backdoor
     * **11**: computer worm
     * **12**: mining
     * **13**: reverse shell
     *
     * > If you do not specify this parameter, the intrusion events of all attack types are queried.
     * @example 13
     *
     * @var int
     */
    public $attackType;

    /**
     * @example 12,12
     *
     * @var string
     */
    public $basicRuleIds;

    /**
     * @description The Common Vulnerabilities and Exposures (CVE) ID of the vulnerability.
     *
     * @example 12112131123, 1231123112
     *
     * @var string
     */
    public $cveId;

    /**
     * @example 1608687364
     *
     * @var int
     */
    public $firstTime;

    /**
     * @example 0
     *
     * @var int
     */
    public $highlightTag;

    /**
     * @example 1608687364
     *
     * @var int
     */
    public $lastTime;

    /**
     * @example false
     *
     * @var bool
     */
    public $needOpenBasicRule;

    /**
     * @example UUID-1231231
     *
     * @var string
     */
    public $needOpenBasicRuleUuids;

    /**
     * @example true
     *
     * @var bool
     */
    public $needOpenRunMode;

    /**
     * @example true
     *
     * @var bool
     */
    public $needOpenVirtualPatche;

    /**
     * @example UUID-1231231234
     *
     * @var string
     */
    public $needOpenVirtualPatcheUuids;

    /**
     * @example 1
     *
     * @var int
     */
    public $needRuleClass;

    /**
     * @example 0
     *
     * @var int
     */
    public $resourceCnt;

    /**
     * @description The list of the resources.
     *
     * @var resourceList[]
     */
    public $resourceList;

    /**
     * @example 13,13
     *
     * @var string
     */
    public $virtualPatcheIds;

    /**
     * @example dedecms-archive.helper.php-vul
     *
     * @var string
     */
    public $vulnKey;

    /**
     * @example high
     *
     * @var string
     */
    public $vulnLevel;

    /**
     * @example ThinkPaPHP 5 Remote Code Execution High Risk Vulnerability
     *
     * @var string
     */
    public $vulnName;

    /**
     * @example protected
     *
     * @var string
     */
    public $vulnStatus;

    /**
     * @example emg
     *
     * @var string
     */
    public $vulnType;
    protected $_name = [
        'attackCnt'                  => 'AttackCnt',
        'attackType'                 => 'AttackType',
        'basicRuleIds'               => 'BasicRuleIds',
        'cveId'                      => 'CveId',
        'firstTime'                  => 'FirstTime',
        'highlightTag'               => 'HighlightTag',
        'lastTime'                   => 'LastTime',
        'needOpenBasicRule'          => 'NeedOpenBasicRule',
        'needOpenBasicRuleUuids'     => 'NeedOpenBasicRuleUuids',
        'needOpenRunMode'            => 'NeedOpenRunMode',
        'needOpenVirtualPatche'      => 'NeedOpenVirtualPatche',
        'needOpenVirtualPatcheUuids' => 'NeedOpenVirtualPatcheUuids',
        'needRuleClass'              => 'NeedRuleClass',
        'resourceCnt'                => 'ResourceCnt',
        'resourceList'               => 'ResourceList',
        'virtualPatcheIds'           => 'VirtualPatcheIds',
        'vulnKey'                    => 'VulnKey',
        'vulnLevel'                  => 'VulnLevel',
        'vulnName'                   => 'VulnName',
        'vulnStatus'                 => 'VulnStatus',
        'vulnType'                   => 'VulnType',
    ];

    public function validate()
    {
    }

    public function toMap()
    {
        $res = [];
        if (null !== $this->attackCnt) {
            $res['AttackCnt'] = $this->attackCnt;
        }
        if (null !== $this->attackType) {
            $res['AttackType'] = $this->attackType;
        }
        if (null !== $this->basicRuleIds) {
            $res['BasicRuleIds'] = $this->basicRuleIds;
        }
        if (null !== $this->cveId) {
            $res['CveId'] = $this->cveId;
        }
        if (null !== $this->firstTime) {
            $res['FirstTime'] = $this->firstTime;
        }
        if (null !== $this->highlightTag) {
            $res['HighlightTag'] = $this->highlightTag;
        }
        if (null !== $this->lastTime) {
            $res['LastTime'] = $this->lastTime;
        }
        if (null !== $this->needOpenBasicRule) {
            $res['NeedOpenBasicRule'] = $this->needOpenBasicRule;
        }
        if (null !== $this->needOpenBasicRuleUuids) {
            $res['NeedOpenBasicRuleUuids'] = $this->needOpenBasicRuleUuids;
        }
        if (null !== $this->needOpenRunMode) {
            $res['NeedOpenRunMode'] = $this->needOpenRunMode;
        }
        if (null !== $this->needOpenVirtualPatche) {
            $res['NeedOpenVirtualPatche'] = $this->needOpenVirtualPatche;
        }
        if (null !== $this->needOpenVirtualPatcheUuids) {
            $res['NeedOpenVirtualPatcheUuids'] = $this->needOpenVirtualPatcheUuids;
        }
        if (null !== $this->needRuleClass) {
            $res['NeedRuleClass'] = $this->needRuleClass;
        }
        if (null !== $this->resourceCnt) {
            $res['ResourceCnt'] = $this->resourceCnt;
        }
        if (null !== $this->resourceList) {
            $res['ResourceList'] = [];
            if (null !== $this->resourceList && \is_array($this->resourceList)) {
                $n = 0;
                foreach ($this->resourceList as $item) {
                    $res['ResourceList'][$n++] = null !== $item ? $item->toMap() : $item;
                }
            }
        }
        if (null !== $this->virtualPatcheIds) {
            $res['VirtualPatcheIds'] = $this->virtualPatcheIds;
        }
        if (null !== $this->vulnKey) {
            $res['VulnKey'] = $this->vulnKey;
        }
        if (null !== $this->vulnLevel) {
            $res['VulnLevel'] = $this->vulnLevel;
        }
        if (null !== $this->vulnName) {
            $res['VulnName'] = $this->vulnName;
        }
        if (null !== $this->vulnStatus) {
            $res['VulnStatus'] = $this->vulnStatus;
        }
        if (null !== $this->vulnType) {
            $res['VulnType'] = $this->vulnType;
        }

        return $res;
    }

    /**
     * @param array $map
     *
     * @return vulnList
     */
    public static function fromMap($map = [])
    {
        $model = new self();
        if (isset($map['AttackCnt'])) {
            $model->attackCnt = $map['AttackCnt'];
        }
        if (isset($map['AttackType'])) {
            $model->attackType = $map['AttackType'];
        }
        if (isset($map['BasicRuleIds'])) {
            $model->basicRuleIds = $map['BasicRuleIds'];
        }
        if (isset($map['CveId'])) {
            $model->cveId = $map['CveId'];
        }
        if (isset($map['FirstTime'])) {
            $model->firstTime = $map['FirstTime'];
        }
        if (isset($map['HighlightTag'])) {
            $model->highlightTag = $map['HighlightTag'];
        }
        if (isset($map['LastTime'])) {
            $model->lastTime = $map['LastTime'];
        }
        if (isset($map['NeedOpenBasicRule'])) {
            $model->needOpenBasicRule = $map['NeedOpenBasicRule'];
        }
        if (isset($map['NeedOpenBasicRuleUuids'])) {
            $model->needOpenBasicRuleUuids = $map['NeedOpenBasicRuleUuids'];
        }
        if (isset($map['NeedOpenRunMode'])) {
            $model->needOpenRunMode = $map['NeedOpenRunMode'];
        }
        if (isset($map['NeedOpenVirtualPatche'])) {
            $model->needOpenVirtualPatche = $map['NeedOpenVirtualPatche'];
        }
        if (isset($map['NeedOpenVirtualPatcheUuids'])) {
            $model->needOpenVirtualPatcheUuids = $map['NeedOpenVirtualPatcheUuids'];
        }
        if (isset($map['NeedRuleClass'])) {
            $model->needRuleClass = $map['NeedRuleClass'];
        }
        if (isset($map['ResourceCnt'])) {
            $model->resourceCnt = $map['ResourceCnt'];
        }
        if (isset($map['ResourceList'])) {
            if (!empty($map['ResourceList'])) {
                $model->resourceList = [];
                $n                   = 0;
                foreach ($map['ResourceList'] as $item) {
                    $model->resourceList[$n++] = null !== $item ? resourceList::fromMap($item) : $item;
                }
            }
        }
        if (isset($map['VirtualPatcheIds'])) {
            $model->virtualPatcheIds = $map['VirtualPatcheIds'];
        }
        if (isset($map['VulnKey'])) {
            $model->vulnKey = $map['VulnKey'];
        }
        if (isset($map['VulnLevel'])) {
            $model->vulnLevel = $map['VulnLevel'];
        }
        if (isset($map['VulnName'])) {
            $model->vulnName = $map['VulnName'];
        }
        if (isset($map['VulnStatus'])) {
            $model->vulnStatus = $map['VulnStatus'];
        }
        if (isset($map['VulnType'])) {
            $model->vulnType = $map['VulnType'];
        }

        return $model;
    }
}
